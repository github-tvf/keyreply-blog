{"version":3,"sources":["webpack:///./src/components/common.js","webpack:///./src/routes/Admin/Post/components/PostView.js","webpack:///./src/routes/Admin/Post/index.js"],"names":["category","id","name","PostView","post","doPost","getBlogByID","editPost","useState","postTitle","setpostTitle","postData","setPostData","postCategory","setpostCategory","thumbnail","setThumbnail","isEdit","setEdit","setFormValue","data","title","content","useEffect","URLSearchParams","location","search","get","handleFileRead","event","a","file","target","files","size","swal","html","animation","showCloseButton","confirmButtonText","customClass","convertBase64","base64","Promise","resolve","reject","fileReader","FileReader","readAsDataURL","onload","result","onerror","error","ClassicEditor","create","document","querySelector","toolbar","heading","options","model","class","view","catch","className","htmlFor","type","placeholder","value","onChange","e","selected","length","map","cat","idx","key","src","alt","inputProps","accept","required","label","variant","editor","onReady","getData","onBlur","onFocus","to","onClick","mapDispatchToProps","connect","state","currentUser"],"mappings":"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","file":"js/7.36b258f39a471bdac0c5.js","sourcesContent":["import React from 'react'\nimport swal from \"sweetalert2\"\nexport const category = [\n  { id: 'Hot', name: \"Hot\" },\n  { id: 'Techology', name: \"Techology\" },\n  { id: 'Fashion', name: \"Fashion\" },\n  { id: 'Sport', name: \"Sport\" },\n  { id: 'Social', name: \"Social\" },\n  { id: 'Relax', name: \"Relax\" },\n]","import React, { useState, useEffect } from 'react';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport { NavLink } from 'react-router-dom';\nimport { category } from 'components/common'\nimport swal from 'sweetalert2';\nimport {\n  doPost,\n  getBlogByID\n} from '../modules/actions'\nconst PostView = ({ post, doPost, getBlogByID, editPost }) => {\n  const [postTitle, setpostTitle] = useState('')\n  const [postData, setPostData] = useState('')\n  const [postCategory, setpostCategory] = useState('')\n  const [thumbnail, setThumbnail] = useState('')\n  const [isEdit, setEdit] = useState(false)\n  const setFormValue = (data) => {\n    setpostTitle(data.title);\n    setPostData(data.content);\n    setpostCategory(data.category);\n    setpostCategory(data.thumbnail);\n  };\n  useEffect(() => {\n    if (new URLSearchParams(location.search).get(\"id\")) {\n      setEdit(true)\n      getBlogByID(new URLSearchParams(location.search).get(\"id\"), setFormValue)\n    }\n  }, [new URLSearchParams(location.search).get(\"id\")]);\n  const onCreatePost = () => {\n    doPost(postTitle, postData, postCategory, thumbnail)\n  }\n  const onEditPost = () => {\n    editPost(new URLSearchParams(location.search).get(\"id\"), postTitle, postData, postCategory, thumbnail)\n  }\n  const handleFileRead = async (event) => {\n    const file = event.target.files[0]\n    const fileSize = file.size / 1024 / 1024;\n    if (fileSize > 2) {\n      swal({\n        title: 'Error',\n        html: '<p class=\"pop-content\">Image size cannot bigger than 2MB.</p>',\n        animation: false,\n        showCloseButton: true,\n        confirmButtonText: 'Đóng',\n        customClass: 'custom-modal animated zoomIn'\n      })\n      return\n    }\n    const base64 = await convertBase64(file)\n    setThumbnail(base64)\n  }\n  const convertBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsDataURL(file)\n      fileReader.onload = () => {\n        resolve(fileReader.result);\n      }\n      fileReader.onerror = (error) => {\n        reject(error);\n      }\n    })\n  }\n  ClassicEditor\n    .create(document.querySelector('#editor'), {\n      toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote'],\n      heading: {\n        options: [\n          { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n          { model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },\n          { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' }\n        ]\n      },\n    })\n    .catch(error => {\n    });\n  return (\n    <>\n      <div className=\"tvf-container\">\n        <div className=\"section-admin\">\n          <h4 className=\"adm-title\">{isEdit ? 'Edit Post' : 'Create Post'}</h4>\n          <div className=\"signin__form--control\">\n            <label htmlFor=\"postTitle\">Title</label>\n            <input type=\"text\" className=\"sign__control\" placeholder=\"post title\" value={postTitle}\n              onChange={e => setpostTitle(e.target.value)} id=\"postTitle\" />\n          </div>\n          <div className=\"signin__form--control\">\n            <label htmlFor=\"categoryLbl\">Category</label>\n            <select className=\"form-control\" onChange={e => setpostCategory(e.target.value)} value={postCategory} id=\"categoryLbl\">\n              <option selected>Chose title category</option>\n              {\n                category.length > 0 &&\n                category.map((cat, idx) => (\n                  <option key={idx} value={cat.id}>{cat.name}</option>\n                ))\n              }\n            </select>\n          </div>\n          <div className=\"signin__form--control\">\n            <label htmlFor=\"postTitle\">Thumbnail</label>\n            {\n              thumbnail &&\n              <img src={thumbnail} alt=\"\" />\n            }\n            <input\n              id=\"originalFileName\"\n              type=\"file\"\n              inputProps={{ accept: 'image/*, .xlsx, .xls, .csv, .pdf, .pptx, .pptm, .ppt' }}\n              required\n              label=\"Document\"\n              name=\"originalFileName\"\n              onChange={e => handleFileRead(e)}\n              size=\"small\"\n              variant=\"standard\"\n            />\n          </div>\n          <br />\n          <br />\n          <br />\n          <div>\n            <CKEditor\n              editor={ClassicEditor}\n              data={postData}\n              onReady={editor => {\n              }}\n              onChange={(event, editor) => {\n                const data = editor.getData();\n                setPostData(data);\n              }}\n              onBlur={(event, editor) => {\n              }}\n              onFocus={(event, editor) => {\n              }}\n            />\n          </div>\n          <div className=\"text-right\">\n            <NavLink className=\"btn btn--back\" to={'/admin'}>Back</NavLink>\n            {\n              isEdit ? (\n                <button type=\"submit\" className=\"btn btn--tvf\" onClick={() => onEditPost()}>Save</button>\n              ) : (\n                <button type=\"submit\" className=\"btn btn--tvf\" onClick={() => onCreatePost()}>Create</button>\n              )\n            }\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PostView;\n","import { connect } from 'react-redux';\nimport PostView from './components/PostView';\nimport {\n  doPost,\n  getBlogByID,\n  editPost,\n} from './modules/actions'\n\nconst mapDispatchToProps = {\n  doPost,\n  getBlogByID,\n  editPost,\n}\nconst mapStateToProps = (state) => ({\n  currentUser: state.currentUser,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostView);\n"],"sourceRoot":""}